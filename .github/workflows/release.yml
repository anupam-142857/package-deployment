name: release-workflow

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Release Type'
        default: 'patch'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # start_release:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: get-release-type
  #     run: echo "Release type = ${{ github.event.inputs.name }}"
  
  get_next_version:
    runs-on: ubuntu-latest
    # needs: start_release
    
    steps:
      - name: checkout-repo-content
        uses: actions/checkout@v2
      - name: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: execute script
        id: execute-script
        run: |
          output=$(python3 release_utils.py --release_type ${{ github.event.inputs.name }})
          echo $output
          new_version=$(echo $output | awk -F, '{print $1}' | sed s/\'//g | sed s/\(// )
          new_tag=$(echo $output | awk -F, '{print $2}' | sed s/\ // | sed s/\'//g | sed s/\)// )
          echo "new version is $new_version"
          echo "new tag is $new_tag"
          echo ::set-output name=version::$new_version
          echo ::set-output name=tag::$new_tag
    
    outputs:
      new_version: ${{ steps.execute-script.outputs.version }}
      new_tag: ${{ steps.execute-script.outputs.tag }}

  # update the version file
  update_version_and_push_tag:
    runs-on: ubuntu-latest
    needs: get_next_version
    steps:
      - name: checkout-repo-content
        uses: actions/checkout@v2
      
      - name: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: bump version
        id: bump-version
        run : |
          echo "current folder = $PWD"
          echo "current branch = $(git branch --show-current)"
          output=$(python3 release_utils.py --release_type ${{ github.event.inputs.name }} --bump_version)
          cat version.json

      - name: add and commit to main
        uses: EndBug/add-and-commit@v7.5.0
        with:
          author_name: Anupam Bhatnagar
          author_email: anupam.nyc@gmail.com

          # The name of the branch to use, if different from the one that triggered the workflow.
          # Default: the branch that triggered the run
          branch: main
          default_author: github_actor
          message: '${{ needs.get_next_version.outputs.new_version }} release'
          pathspec_error_handling: exitAtEnd

          # Arguments for the git pull command. Use NO-PULL to avoid the action pulling at all.
          # Default: '--no-rebase'
          pull: 'NO-PULL'

          tag: '${{ needs.get_next_version.outputs.new_tag }}'

  # build the PyPI package and upload it
  build_and_upload:
    runs-on: ubuntu-latest
    needs: update_version_and_push_tag
    steps:
      - name: checkout-repo-content
        uses: actions/checkout@v2
      - name: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: build and upload
          env:
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          run: |
            python3 setup.py sdist 
            python3 -m twine upload --repository pypi dist/*
  
  # create the release


















# git checkout -b ${{ needs.get_current_version.outputs.new_branch }}
# echo $(git branch --show-current)
# out=$(python3 release_utils.py --release_type ${{ github.event.inputs.name }} --bump_version)
# echo $out
# cat version.json

# git add version.json
# git commit -m 'bumping the version'
# git push -u origin ${{ needs.get_current_version.outputs.next_branch }}
    
  # print_next_version_job:
  #   runs-on: ubuntu-latest
  #   needs: get_next_version
  #   steps:
  #     - name: lets echo
  #       # env:
  #       #   previous_output: ${{ needs.get_next_version.outputs.next_version}}
  #       # run: echo $previous_output
  #       run: echo ${{ needs.get_next_version.outputs.next_version}}


  # checkout a new branch release-x.y.z
  # checkout_branch:
  #   runs-on: ubuntu-latest
  #   needs: get_next_version
  #   steps:
  #     - name: checkout-new-release-branch
  #       uses: peterjgrainger/action-create-branch@v2.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}    
  #       # with:
        #   branch: release-v${{ needs.get_current_version.outputs.next_version }}
  